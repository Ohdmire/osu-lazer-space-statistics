name: Rust Windows Build on Tag

on:
  push:
    tags:
      - 'v*'  # 匹配以 'v' 开头的标签，例如 v1.0.0

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust (Nightly)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache Cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Build for Windows
      run: cargo build --release

    - name: Rename the executable
      shell: pwsh
      run: |
        $exePath = "target/release/osu-lazer-space-statistics.exe"
        $newExePath = "target/release/osu-lazer-space-statistics_${{ github.ref_name }}.exe"
        Move-Item -Path $exePath -Destination $newExePath

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v2
      with:
        tag_name: ${{ github.ref_name }}  # 使用标签名称作为 Release 的标签
        release_name: Release ${{ github.ref_name }}  # Release 的名称
        draft: false
        prerelease: false
        generate_release_notes: true  # 自动生成 Release Notes

    - name: Upload executable to Release
      uses: actions/upload-release-asset@v2
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # 从创建 Release 的步骤中获取上传 URL
        asset_path: target/release/osu-lazer-space-statistics_${{ github.ref_name }}.exe  # 要上传的文件路径
        asset_name: osu-lazer-space-statistics_${{ github.ref_name }}.exe  # 上传后的文件名
        asset_content_type: application/octet-stream  # 文件类型
